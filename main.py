# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
import os
import logging
from logging.handlers import RotatingFileHandler
import sys

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
def setup_logging():
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # Console handler (–¥–ª—è Render)
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    # File handler (–¥–ª—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤)
    file_handler = RotatingFileHandler('app.log', maxBytes=1024*1024, backupCount=5)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    
    logging.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GITHUB_MUSIC_URL = "https://raw.githubusercontent.com/work24room-sketch/telegram-voice-mixer-bot/main/background_music.mp3"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    bot.reply_to(message, "üéµ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –¥–æ–±–∞–≤–ª—é –∫ –Ω–µ–º—É —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É!")

@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    logging.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    bot.send_chat_action(message.chat.id, "typing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Salebot
        file_info = bot.get_file(message.voice.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
        
        logging.info(f"–§–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {file_url}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        redirect_text = (
            "üéµ –°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! \n\n"
            "–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º—É–∑—ã–∫–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º —á–∞—Ç-–±–æ—Ç–æ–º. \n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @YourSaleBotName –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã üòä"
        )
        
        bot.reply_to(message, redirect_text)
        logging.info(f"–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}"
        logging.error(error_msg)
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    return

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    logging.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§")

# --- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ ---
def cleanup(filename):
    try:
        if os.path.exists(filename):
            os.remove(filename)
            logging.info(f"–§–∞–π–ª —É–¥–∞–ª–µ–Ω: {filename}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ---
app = Flask(__name__)

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã Flask ---
@app.route("/health")
def health_check():
    logging.info("Health check request")
    return jsonify({"status": "healthy", "service": "voice-mixer-api", "timestamp": time.time(), "version": "1.0"})

@app.route("/")
def index():
    logging.info("Root request")
    return "üéµ Voice Mixer Bot is running! Use /health for status check."

@app.route("/process_audio", methods=["POST"])
def process_audio():
    try:
        logging.info("Process audio request")
        # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ API
        return jsonify({"status": "success", "message": "Audio processing endpoint"})
    except Exception as e:
        logging.error(f"Error in process_audio: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/download/<filename>", methods=["GET"])
def download_file(filename):
    try:
        logging.info(f"Download request for file: {filename}")
        # –í–∞—à –∫–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        return send_file(filename, as_attachment=True)
    except Exception as e:
        logging.error(f"Error downloading file {filename}: {e}")
        return jsonify({"status": "error", "message": str(e)}), 404

@app.route("/api/generate", methods=["POST"])
def generate_for_salebot():
    try:
        logging.info("API generate request from Salebot")
        data = request.get_json()
        
        if not data or 'voice_message_url' not in data:
            logging.warning("Missing voice_message_url in request")
            return jsonify({
                "status": "error",
                "message": "Missing required field: voice_message_url"
            }), 400
        
        client_id = data.get('client_id', 'unknown')
        name = data.get('name', 'Guest')
        voice_url = data['voice_message_url']
        
        logging.info(f"Processing audio for client: {client_id}, name: {name}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        
        response = requests.get(voice_url)
        if response.status_code != 200:
            logging.error(f"Failed to download voice message: {response.status_code}")
            return jsonify({
                "status": "error",
                "message": f"Failed to download voice message: {response.status_code}"
            }), 400
        
        with open(voice_filename, "wb") as f:
            f.write(response.content)
        
        logging.info(f"Voice message downloaded: {voice_filename}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)
        
        logging.info("Starting audio processing...")
        mix_voice_with_music(voice_filename, output_path, GITHUB_MUSIC_URL)
        logging.info("Audio processing completed")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_url = urljoin(request.host_url, f"download/{output_filename}")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        cleanup(voice_filename)
        
        logging.info(f"Audio ready for download: {download_url}")
        
        return jsonify({
            "status": "success",
            "message": "Audio mixed successfully",
            "download_url": download_url,
            "filename": output_filename
        })
        
    except Exception as e:
        error_msg = f"Error processing audio: {str(e)}"
        logging.error(error_msg)
        return jsonify({
            "status": "error",
            "message": error_msg
        }), 500

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def create_app():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setup_logging()
    logging.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
    return app

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Gunicorn ---
application = create_app()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    logging.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä...")
    app.run(host="0.0.0.0", port=5000, debug=False)

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
import requests
from urllib.parse import urljoin
import threading
from flask import Flask, request, jsonify, send_file
import telebot
import os
import uuid
import time  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from audio_processor import mix_voice_with_music

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GITHUB_MUSIC_URL = "https://raw.githubusercontent.com/work24room-sketch/telegram-voice-mixer-bot/main/background_music.mp3"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "üéµ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –¥–æ–±–∞–≤–ª—é –∫ –Ω–µ–º—É —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É!")

@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    # --- –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –í SALEBOT ---
    bot.send_chat_action(message.chat.id, "typing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Salebot
        file_info = bot.get_file(message.voice.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        redirect_text = (
            "üéµ –°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! \n\n"
            "–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º—É–∑—ã–∫–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º —á–∞—Ç-–±–æ—Ç–æ–º. \n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @YourSaleBotName –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã üòä"
        )
        
        bot.reply_to(message, redirect_text)
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    # –ü–†–ï–†–´–í–ê–ï–ú –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    return
    # --- –ö–û–ù–ï–¶ –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø ---

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§")

# --- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ ---
def cleanup(filename):
    try:
        if os.path.exists(filename):
            os.remove(filename)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
def run_bot():
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞...")
    try:
        bot.remove_webhook()
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        bot.polling(none_stop=True, timeout=60)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ---
app = Flask(__name__)

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã Flask ---
@app.route("/health")
def health_check():
    return jsonify({"status": "healthy", "service": "voice-mixer-api", "timestamp": time.time(), "version": "1.0"})

@app.route("/")
def index():
    return "üéµ Voice Mixer Bot is running! Use /health for status check."

@app.route("/process_audio", methods=["POST"])
def process_audio():
    try:
        # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ API
        return jsonify({"status": "success", "message": "Audio processing endpoint"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/download/<filename>", methods=["GET"])
def download_file(filename):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
        if not os.path.exists(filename) or '..' in filename or '/' in filename:
            return jsonify({"status": "error", "message": "File not found"}), 404
        
        return send_file(filename, as_attachment=True, download_name=f"mixed_audio_{filename.split('_')[-1]}")
    
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 404

@app.route("/api/generate", methods=["POST"])
def generate_for_salebot():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Salebot
        data = request.get_json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not data or 'voice_message_url' not in data:
            return jsonify({
                "status": "error",
                "message": "Missing required field: voice_message_url"
            }), 400
        
        client_id = data.get('client_id', 'unknown')
        name = data.get('name', 'Guest')
        voice_url = data['voice_message_url']
        
        print(f"üéµ –ó–∞–ø—Ä–æ—Å –æ—Ç Salebot: client_id={client_id}, name={name}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        
        response = requests.get(voice_url)
        if response.status_code != 200:
            return jsonify({
                "status": "error",
                "message": f"Failed to download voice message: {response.status_code}"
            }), 400
        
        with open(voice_filename, "wb") as f:
            f.write(response.content)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)
        
        print("üéµ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –¥–ª—è Salebot...")
        mix_voice_with_music(voice_filename, output_path, GITHUB_MUSIC_URL)
        print("‚úÖ –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è Salebot!")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_url = urljoin(request.host_url, f"download/{output_filename}")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
        cleanup(voice_filename)
        
        return jsonify({
            "status": "success",
            "message": "Audio mixed successfully",
            "download_url": download_url,
            "filename": output_filename
        })
        
    except Exception as e:
        error_msg = f"‚ùå Error processing audio: {str(e)}"
        print(error_msg)
        return jsonify({
            "status": "error",
            "message": error_msg
        }), 500

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def create_app():
    #if os.environ.get('WERKZEUG_RUN_MAIN') != 'true':
       # bot_thread = threading.Thread(target=run_bot)
       # bot_thread.daemon = True
       # bot_thread.start()
       # print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
    return app

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Gunicorn ---
application = create_app()

if __name__ == "__main__":
    #bot_thread = threading.Thread(target=run_bot)
    #bot_thread.daemon = True
    #bot_thread.start()
    #print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä...")
    app.run(host="0.0.0.0", port=5000, debug=False)

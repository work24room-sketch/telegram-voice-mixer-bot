from flask import Flask, request, jsonify, send_file
import os
import uuid
import time
import requests
import logging
import tempfile
from audio_processor import mix_voice_with_music

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
GITHUB_MUSIC_URL = "https://raw.githubusercontent.com/work24room-sketch/telegram-voice-mixer-bot/main/background_music.mp3"

# ==================== –§–£–ù–ö–¶–ò–Ø –®–£–ú–û–ü–û–î–ê–í–õ–ï–ù–ò–Ø ====================

def apply_noise_reduction(input_audio_path, output_audio_path):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è
        try:
            import noisereduce as nr
            import soundfile as sf
            from scipy.io import wavfile
        except ImportError:
            logger.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø.")
            return False

        logger.info(f"üîá Applying noise reduction to: {input_audio_path}")
        
        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        if input_audio_path.endswith('.ogg'):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ogg –≤ wav –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            import subprocess
            wav_temp_path = f"temp_{uuid.uuid4().hex}.wav"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ogg to wav using ffmpeg
            subprocess.run([
                'ffmpeg', '-i', input_audio_path, '-ar', '16000', 
                '-ac', '1', '-y', wav_temp_path
            ], check=True, capture_output=True)
            
            rate, data = wavfile.read(wav_temp_path)
            os.remove(wav_temp_path)  # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π wav
        else:
            rate, data = wavfile.read(input_audio_path)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
        reduced_noise = nr.reduce_noise(
            y=data, 
            sr=rate,
            prop_decrease=0.8,  # —Å–∏–ª–∞ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è (80%)
            stationary=True
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        wavfile.write(output_audio_path, rate, reduced_noise)
        logger.info(f"‚úÖ Noise reduction applied: {output_audio_path}")
        return True

    except Exception as e:
        logger.error(f"‚ùå Noise reduction failed: {str(e)}")
        return False

# ==================== –≠–ù–î–ü–û–ò–ù–¢–´ ====================

@app.route("/health")
def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return jsonify({
        "status": "healthy",
        "service": "voice-mixer-api",
        "timestamp": time.time(),
        "version": "1.0"
    })

@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return "üéµ Voice Mixer Bot API is running! Use /health for status check."

@app.route("/process_audio", methods=["POST"])
def process_audio():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Å–æ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º"""
    logger.info("üéØ /process_audio endpoint called!")
    
    try:
        data = request.get_json()
        if not data:
            logger.error("‚ùå No data received")
            return jsonify({"error": "No data received"}), 400

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ SaleBot –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        voice_url = data.get("voice_url")
        client_id = data.get("client_id")
        name = data.get("name")

        logger.info(f"üîç voice_url: {voice_url}")
        logger.info(f"üîç client_id: {client_id}")
        logger.info(f"üîç name: {name}")

        if not voice_url or voice_url == 'None':
            logger.error("‚ùå voice_url is required")
            return jsonify({"error": "voice_url is required"}), 400

        # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"üì• Downloading from: {voice_url}")
        try:
            voice_response = requests.get(voice_url, timeout=30)
            voice_response.raise_for_status()
        except Exception as e:
            logger.error(f"‚ùå Failed to download voice: {str(e)}")
            return jsonify({"error": f"Failed to download voice: {str(e)}"}), 400

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        with open(voice_filename, "wb") as f:
            f.write(voice_response.content)
        logger.info(f"üíæ Saved voice as: {voice_filename}")

        # 3. –®–£–ú–û–ü–û–î–ê–í–õ–ï–ù–ò–ï (–Ω–æ–≤—ã–π —ç—Ç–∞–ø)
        cleaned_voice_filename = None
        try:
            cleaned_voice_filename = f"cleaned_voice_{uuid.uuid4().hex}.wav"
            noise_reduction_success = apply_noise_reduction(voice_filename, cleaned_voice_filename)
            
            if noise_reduction_success:
                logger.info("‚úÖ Noise reduction successful")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
                voice_for_mixing = cleaned_voice_filename
            else:
                logger.info("‚ö†Ô∏è Using original voice without noise reduction")
                voice_for_mixing = voice_filename
                
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Noise reduction skipped: {str(e)}")
            voice_for_mixing = voice_filename

        # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ (–º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º—É–∑—ã–∫–æ–π)
        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)
        
        logger.info("üéµ Mixing audio with music...")
        try:
            mix_voice_with_music(voice_for_mixing, output_path, GITHUB_MUSIC_URL)
            logger.info("‚úÖ Audio mixed successfully")
        except Exception as e:
            logger.error(f"‚ùå Audio processing failed: {str(e)}")
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            cleanup(voice_filename)
            if cleaned_voice_filename and os.path.exists(cleaned_voice_filename):
                cleanup(cleaned_voice_filename)
            return jsonify({"error": f"Audio processing failed: {str(e)}"}), 500

        # 5. –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_url = f"{request.host_url}download/{output_filename}"
        logger.info(f"üîó Download URL: {download_url}")

        # 6. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–≥–æ–ª–æ—Å–æ–≤—ã—Ö, –Ω–æ –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∏–∫—Å–∞)
        cleanup(voice_filename)
        if cleaned_voice_filename and os.path.exists(cleaned_voice_filename):
            cleanup(cleaned_voice_filename)

        # 7. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è SaleBot
        response_data = {
            "status": "success",
            "message": "Audio processed successfully with noise reduction",
            "download_url": download_url,
            "file_name": output_filename,
            "client_id": client_id,
            "name": name,
            "processed_at": time.time(),
            "noise_reduction_applied": noise_reduction_success if 'noise_reduction_success' in locals() else False
        }
        
        logger.info(f"‚úÖ Success: {response_data}")
        return jsonify(response_data)

    except Exception as e:
        logger.error(f"‚ùå Error in /process_audio: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"error": str(e)}), 500

@app.route("/download/<filename>", methods=["GET"])
def download_file(filename):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
        safe_filename = os.path.basename(filename)
        file_path = os.path.join(os.getcwd(), safe_filename)
        
        if not os.path.exists(file_path) or '..' in filename or '/' in filename:
            return jsonify({"status": "error", "message": "File not found"}), 404
        
        return send_file(
            file_path,
            as_attachment=True,
            download_name=f"voice_mix_{safe_filename}"
        )
    
    except Exception as e:
        logger.error(f"‚ùå Download error: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 404

def cleanup(filename):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        if os.path.exists(filename):
            os.remove(filename)
            logger.info(f"üóëÔ∏è Deleted: {filename}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Cleanup error for {filename}: {e}")

# ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================
if __name__ == "__main__":
    logger.info("üåê Starting Flask server...")
    app.run(host="0.0.0.0", port=5000, debug=False)

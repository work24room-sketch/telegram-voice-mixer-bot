from flask import Flask, request, jsonify, send_file
import os
import uuid
import time
import requests
import logging
import json  # ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ò–ú–ü–û–†–¢!
from audio_processor import mix_voice_with_music

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
GITHUB_MUSIC_URL = "https://raw.githubusercontent.com/work24room-sketch/telegram-voice-mixer-bot/main/background_music.mp3"

# ==================== –≠–ù–î–ü–û–ò–ù–¢–´ ====================

@app.route("/health")
def health_check():
    return jsonify({
        "status": "healthy",
        "service": "voice-mixer-api",
        "timestamp": time.time(),
        "version": "1.0"
    })

@app.route("/")
def index():
    return "üéµ Voice Mixer Bot API is running! Use /health for status check."

@app.route("/process_audio", methods=["POST"])
def process_audio():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
    logger.info("üéØ /process_audio endpoint called!")
    
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ JSON
        if request.content_type == 'application/json':
            data = request.get_json()
        else:
            data = request.get_json(force=True, silent=True) or {}
        
        logger.info(f"üì¶ JSON data: {json.dumps(data, ensure_ascii=False)}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        voice_url = data.get("voice_url")
        client_id = data.get("client_id")
        name = data.get("name")
        chat_id = data.get("chat_id")

        logger.info(f"üîç voice_url: {voice_url}")
        logger.info(f"üîç client_id: {client_id}")
        logger.info(f"üîç name: {name}")
        logger.info(f"üîç chat_id: {chat_id}")

        if not voice_url:
            return jsonify({"error": "voice_url is required"}), 400

        if not chat_id and client_id:
            chat_id = client_id
            logger.info(f"üîß Using client_id as chat_id: {chat_id}")

        if not chat_id:
            return jsonify({"error": "chat_id is required"}), 400

        # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"üì• Downloading from: {voice_url}")
        voice_response = requests.get(voice_url, timeout=30)
        voice_response.raise_for_status()

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        with open(voice_filename, "wb") as f:
            f.write(voice_response.content)

        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)
        
        logger.info("üéµ Mixing audio with music...")
        mix_voice_with_music(voice_filename, output_path, GITHUB_MUSIC_URL)

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        logger.info("üì§ Sending to Telegram...")
        with open(output_path, "rb") as audio_file:
            files = {'audio': audio_file}
            send_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendAudio"
            send_data = {
                'chat_id': chat_id,
                'title': 'üéµ –í–∞—à –º–∏–∫—Å!',
                'caption': f'–î–ª—è {name}' if name else '–í–∞—à –º–∏–∫—Å –≥–æ—Ç–æ–≤!'
            }
            send_response = requests.post(send_url, data=send_data, files=files, timeout=30)
            send_response.raise_for_status()
            result = send_response.json()
            ready_file_id = result['result']['audio']['file_id']

        # 5. –û—á–∏—Å—Ç–∫–∞
        cleanup(voice_filename)
        cleanup(output_path)

        # 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "status": "success",
            "message": "Audio sent to Telegram successfully",
            "telegram_file_id": ready_file_id,
            "client_id": client_id,
            "name": name
        }
        
        logger.info(f"‚úÖ Success response sent")
        return jsonify(response_data)

    except Exception as e:
        logger.error(f"‚ùå Error: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/download/<filename>", methods=["GET"])
def download_file(filename):
    try:
        file_path = os.path.join(os.getcwd(), filename)
        if os.path.exists(file_path):
            return send_file(file_path, as_attachment=True)
        return jsonify({"error": "File not found"}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def cleanup(filename):
    try:
        if os.path.exists(filename):
            os.remove(filename)
    except:
        pass

if __name__ == "__main__":
    logger.info("üåê Starting Flask server...")
    app.run(host="0.0.0.0", port=5000, debug=False)

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
import requests
from urllib.parse import urljoin
import threading
from flask import Flask, request, jsonify, send_file
import telebot
import os
import uuid
from audio_processor import mix_voice_with_music

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GITHUB_MUSIC_URL = "https://raw.githubusercontent.com/work24room-sketch/telegram-voice-mixer-bot/main/background_music.mp3"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ---
app = Flask(__name__)

import time
from flask import jsonify

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ Flask-—Ä–æ—É—Ç–∞–º–∏
@app.route("/health")
def health_check():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ UptimeRobot"""
    return jsonify({
        "status": "healthy",
        "service": "voice-mixer-api",
        "timestamp": time.time(),
        "version": "1.0"
    })

@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–∂–µ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –ø–∏–Ω–≥–∞"""
    return "üéµ Voice Mixer Bot is running! Use /health for status check."

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã Flask ---
@app.route("/process_audio", methods=["POST"])
def process_audio():
    try:
        data = request.get_json()
        voice_file_path = data.get("voice_file_path")

        if not voice_file_path or not os.path.exists(voice_file_path):
            return jsonify({"error": "File not found"}), 400

        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)

        result_path = mix_voice_with_music(voice_file_path, output_path, GITHUB_MUSIC_URL)
        return jsonify({"processed_file": output_filename})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/download/<filename>", methods=["GET"])
def download_file(filename):
    try:
        file_path = os.path.join(os.getcwd(), filename)
        if os.path.exists(file_path):
            return send_file(file_path, as_attachment=True)
        else:
            return jsonify({"error": "File not found"}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/")
def index():
    return "Voice Mixer Bot is running!"

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "üéµ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –¥–æ–±–∞–≤–ª—é –∫ –Ω–µ–º—É —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É!")

@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    try:
        print("üîä –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        bot.send_chat_action(message.client.id, "upload_audio")

        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        with open(voice_filename, "wb") as f:
            f.write(downloaded_file)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤)
        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)
        
        print("üéµ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ...")
        mix_voice_with_music(voice_filename, output_path, GITHUB_MUSIC_URL)
        print("‚úÖ –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(output_path, "rb") as audio_file:
            bot.send_audio(message.chat.id, audio_file, title="–í–∞—à –º–∏–∫—Å!", performer="Voice Mixer Bot")

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        cleanup(voice_filename)
        cleanup(output_path)
        print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)
        bot.reply_to(message, error_msg)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§")

def cleanup(filename):
    try:
        if os.path.exists(filename):
            os.remove(filename)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
def run_bot():
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞...")
    try:
        bot.remove_webhook()  # –í–∞–∂–Ω–æ: –æ—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        bot.polling(none_stop=True, timeout=60)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def create_app():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –∑–∞–ø—É—Å–∫–µ (–Ω–µ –≤ Gunicorn)
    if os.environ.get('WERKZEUG_RUN_MAIN') != 'true':
        bot_thread = threading.Thread(target=run_bot)
        bot_thread.daemon = True
        bot_thread.start()
        print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
    
    return app
@app.route("/api/generate", methods=["POST"])
def generate_for_salebot():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Salebot.
    –û–∂–∏–¥–∞–µ—Ç JSON: {"client_id": "123", "name": "Ivan", "voice_message_url": "https://.../voice.ogg"}
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON: {"status": "success", "client_id": "123", "name": "Ivan", "download_url": "https://.../mixed_abc123.mp3"}
    """
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ Salebot
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No JSON data provided"}), 400

        client_id = data.get("client_id")
        name = data.get("name")
        voice_message_url = data.get("voice_message_url")  # –ù–æ–≤–∞—è –∫–ª—é—á–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è!

        if not all([client_id, name, voice_message_url]):
            return jsonify({"status": "error", "message": "Missing required fields (client_id, name, voice_message_url)"}), 400

        print(f"üéØ Salebot request: client_id={client_id}, name={name}")

        # 2. –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π URL
        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        print(f"üì• Downloading voice message from {voice_message_url}...")
        
        try:
            response = requests.get(voice_message_url, timeout=30)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (status code 200)
            
            with open(voice_filename, 'wb') as f:
                f.write(response.content)
            print("‚úÖ Voice message downloaded successfully.")
        except requests.exceptions.RequestException as e:
            error_msg = f"Failed to download voice message: {str(e)}"
            print(f"‚ùå {error_msg}")
            return jsonify({"status": "error", "message": error_msg}), 400

        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ (–≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)
        
        print("üéµ Mixing audio...")
        result_path = mix_voice_with_music(voice_filename, output_path, GITHUB_MUSIC_URL)
        print("‚úÖ Audio mixed successfully.")

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤–∞—à —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render, –∏ —Ñ–∞–π–ª—ã —Ä–∞–∑–¥–∞—é—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω—è
        base_url = os.environ.get('RENDER_EXTERNAL_URL', request.host_url)  # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Render, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_EXTERNAL_URL –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞–Ω–∞
        # request.host_url - —ç—Ç–æ fallback (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        
        download_url = urljoin(base_url, f"/download/{output_filename}")
        print(f"üîó Generated download URL: {download_url}")

        # 5. –û—á–∏—â–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª (–∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
        cleanup(voice_filename)
        # –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ù–ï —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É! –ï–≥–æ —Å–∫–∞—á–∞–µ—Ç Salebot.
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤.

        # 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º Salebot
        return jsonify({
            "status": "success",
            "client_id": client_id,
            "name": name,
            "download_url": download_url
        })

    except Exception as e:
        error_msg = f"Internal server error: {str(e)}"
        print(f"‚ùå {error_msg}")
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'voice_filename' in locals() and os.path.exists(voice_filename):
            cleanup(voice_filename)
        if 'output_path' in locals() and os.path.exists(output_path):
            cleanup(output_path)
        return jsonify({"status": "error", "message": error_msg}), 500
# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Gunicorn ---
application = create_app()

# if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
   # bot_thread = threading.Thread(target=run_bot)
   # bot_thread.daemon = True
   # bot_thread.start()
    
    print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä...")
   # app.run(host="0.0.0.0", port=5000, debug=False)
